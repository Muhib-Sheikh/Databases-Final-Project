import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Random;
import java.util.Calendar;
import java.util.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class clientProgram {

	public static String ADMINPASS = "X12sPyzt9834a";
	static Scanner scanner = new Scanner(System.in);
    public static String host = "jdbc:mysql://cisvm-winsrv-mysql1.unfcsd.unf.edu:3307/group1";
    //String host2 = "jdbc:mysql://localhost:3306/group1";
    public static String username = "n01442744";
    public static String password = "V22d9569";
    public static String userEmail = null;
    public static String userID = null;
    public static String guest = null;
    public static String userPass = null;
    public static String adminPass = null;
    public static String ISBN;
    public static int choice = 0;
    static public String userString;
    public static boolean signedIn = false;
    public static double subtotal;
    public static double sum;
    public static String tempUserID;
    public static int publisherID = 0;
    public static int authorID = 0;
    public static int genreID = 0;
    public static int rentCount = 0;
    public static int customerID = 0;
    public static int formatID = 0;
    public static int aisleNum = 0;
    public static double total;
    public static String custEmail;
    public static int orderID;
    public static int quantity;
    public static int flag = 1;
    public static int rented;
    public static Date dueDate;
	public static String date5;
	public static String title;
    public static int quantity1;
	public static int inventory;
	public static double LateFee;
	public static int bID;
	public static int Rented = 0;	
	public static double fee2;
	public static void main(String[] args) throws ClassNotFoundException {
		
		
		System.out.println("*****************************************************************");
		System.out.println("*								*");
		System.out.println("*								*");
		System.out.println("*	   \t\tWELCOME TO THE UNF			*");
		System.out.println("*			    BOOKSTORE				*");
		System.out.println("*								*");
		System.out.println("*								*");
		System.out.println("*								*");
		System.out.println("*****************************************************************");
		
			MainMenu();
			
	}
	public static void MainMenu() {
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter 1 for User Access and Enter 2 for Admin Access");
		choice = scanner.nextInt();
		
		if (choice == 1) {
			UserAccess();
		}
		
		if(choice == 2) {
			System.out.println("Enter Admin Passcode");
			userString = scan.nextLine();
			if (userString.compareToIgnoreCase(ADMINPASS)== 0) {
				
			
			AdminAccess();
			}
			else {
				System.out.println("Incorrect passcode");
				MainMenu();
			}
			
		}
		else {
			System.out.println("Invalid Option!");
			MainMenu();
		}
		
	}
	
	public static void AdminAccess() {
		System.out.println("Enter 1 to Locate Title\n"
				+  "Enter 2 to Update Inventory\n"
				+  "Enter 3 to Check User Balance and Late Fees\n"
				+  "Enter 4 to Generate Reports\n"
				+  "Enter 5 to Return");

		choice = scanner.nextInt();
		
		switch (choice) {
		case 1: 
			AdminSearch();
			break;
		case 2: 
			UpdateInventory();
			break;
		case 3:
			CheckUserBal();
			break;
		case 4:
			GenerateReports() ;
			break;
		case 5:
			 MainMenu();
			break;
		default:
			System.out.println("Not A Valid Option");
			AdminAccess();			
			break;
		}
	}
	public static void AdminSearch() {
		Scanner scan6 = new Scanner(System.in);
		System.out.print("Search by title, genre or author:\n");
		System.out.println("Or press enter to view all books in inventory");
		userString = scan6.nextLine();
		//System.out.println(userString);
		//System.out.println("WHERE authors.FirstName LIKE \'" + userString + "\' OR authors.LastName LIKE \'" + userString + "\' OR books.Title LIKE \'" + userString + "\' OR books.ISBN LIKE \'" + userString + "\' OR genre.GenreName LIKE \'" + userString + "\'");
		// SQL code here to search tables for books by input.
		String query = "SELECT Title, authors.Name, ISBN, Price, RentalPrice, genre.GenreName, publishers.PublisherName, format.`New/used`, `book format`.BookType , Inventory, DisplayArea, NewRelease\r\n" + 
				"FROM books\r\n" +  
				"INNER JOIN genre on genre.GenreID = books.GenreID\r\n" + 
				"INNER JOIN publishers on publishers.PublisherID = books.PublisherID\r\n" + 
				"INNER JOIN `format` on format.`FormatID` = books.FormatID\r\n" + 
				"INNER JOIN `book format` on `book format`.BookTypeID = format.`BookTypeID`\r\n" + 
				"INNER JOIN authors on authors.AuthorID = `books`.AuthorID\r\n" + 
				"WHERE authors.Name LIKE \'%" + userString + "%\' OR " +
				"books.Title LIKE \'%" + userString + "%\' OR " +
			    "books.ISBN LIKE \'" + userString + "\' OR " +
				"genre.GenreName LIKE \'%" + userString + "%\'" +
				"ORDER BY books.Title;";
			
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query);
                ResultSet rs = pst.executeQuery()) {
			String title, name, isbn1, price, rentPrice, genre, pub, condition, format, inventory;
			String aisle, release;
			System.out.printf("%-90s %-30s %-20s %-10s %-14s %-30s %-40s %-15s %-16s %-10s %-20s %7s %-1s\n","Title","Name","ISBN","Price","Rental Price","Genre","Publisher","Condition","Format","Inv","Aisle Number","Release", "");
			System.out.println("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			while (rs.next()) {
				
				title = rs.getString(1);
				name = rs.getString(2);
				isbn1 = rs.getString(3);
				price = rs.getString(4);
				rentPrice = rs.getString(5);
				genre = rs.getString(6);
				pub = rs.getString(7);
				condition = rs.getString(8);
				format = rs.getString(9);
				inventory = rs.getString(10);
				aisle = rs.getString(11);
				release = rs.getString(12);
				System.out.printf("%-90s %-30s %-20s %-10s %-14s %-30s %-40s %-15s %-16s %-10s %-20s %-15s\n", title,  name,  isbn1,  price,  rentPrice,  genre,  pub,  condition,  format, inventory, aisle, release);
				
            }
			
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		System.out.println();
		System.out.println("1 to Continue Searching\n" + "2 to Return to Menu\n");		
		choice = scan6.nextInt();
		if(choice == 1) {
			AdminSearch();
		}
		else if(choice == 2) {
			AdminAccess();
		}
		else {
			while(choice != 1 || choice != 2) {
				System.out.println("Invalid Option!\n");
				System.out.println("1 to Continue Searching\n" + "2 to Return to Menu\n");
				choice = scan6.nextInt();
				if(choice == 1) {
					Search();
				}
				else if(choice == 2) {
					UserAccess();
				}
			}
		}
		
		
	}//end AdminSearch
	
	public static void UpdateInventory() {
		Scanner scanme = new Scanner(System.in);
			Scanner scan = new Scanner(System.in);
			System.out.println("Enter 1 to edit/delete a title\n" +
							   "Enter 2 to add a title\n" +
							   "Enter 3 to return to Admin Menu\n"
					);
			choice = Integer.parseInt(scan.nextLine());
			
			if (choice ==  1) {
			System.out.println("Enter ISBN of title you would like to update.");
			ISBN = scan.nextLine();
			
			String query = "SELECT Title, authors.Name, ISBN, Price, RentalPrice, genre.GenreName, publishers.PublisherName, format.`New/used`, `book format`.BookType , Inventory, DisplayArea, NewRelease\r\n" +  
					"FROM books\r\n" +  
					"INNER JOIN genre on genre.GenreID = books.GenreID\r\n" + 
					"INNER JOIN publishers on publishers.PublisherID = books.PublisherID\r\n" + 
					"INNER JOIN `format` on format.`FormatID` = books.FormatID\r\n" + 
					"INNER JOIN `book format` on `book format`.BookTypeID = format.`BookTypeID`\r\n" + 
					"INNER JOIN authors on authors.AuthorID = `books`.AuthorID \r\n" + 
				    "WHERE books.ISBN LIKE \'" + ISBN + "\';";
				
			try (Connection con = DriverManager.getConnection(host, username, password);
	                PreparedStatement pst = con.prepareStatement(query);
	                ResultSet rs = pst.executeQuery()) {
				String title, name, isbn1, price, rentPrice, genre, pub, condition, format, inventory;
				String aisle, release;
				
				System.out.printf("%-90s %-30s %-20s %-10s %-14s %-30s %-40s %-15s %-16s %-10s %-20s %7s %-1s\n","Title","Name","ISBN","Price","Rental Price","Genre","Publisher","Condition","Format","Inv","Aisle Number","Release", "");
				System.out.println("------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				while (rs.next()) {
					
					title = rs.getString(1);
					name = rs.getString(2);
					isbn1 = rs.getString(3);
					price = rs.getString(4);
					rentPrice = rs.getString(5);
					genre = rs.getString(6);
					pub = rs.getString(7);
					condition = rs.getString(8);
					format = rs.getString(9);
					inventory = rs.getString(10);
					aisle = rs.getString(11);
					release = rs.getString(12);
					System.out.printf("%-90s %-30s %-20s %-10s %-14s %-30s %-40s %-15s %-16s %-10s %-20s %-15s\n", title,  name,  isbn1,  price,  rentPrice,  genre,  pub,  condition,  format, inventory, aisle, release);
					
	            }
				
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
	            lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
			System.out.println();
			System.out.println("1 to Continue Searching\n" + 
							   "2 to Return to Menu\n" +
							   "3 to Update Title\n" +
							   "4 to Delete Title\n");
			
			choice = scanme.nextInt();
			
			
			if(choice == 1) {
				UpdateInventory();
			}
			
			else if(choice == 2) {
			AdminAccess();
			}
			
			else if (choice == 3) {
				System.out.println( "Enter 1 to update Price\n" +
									"Enter 2 to update Rental Price\n" +
									"Enter 3 to update Inventory\n" +
									"Enter 4 to update Display Area/Aisle\n" +
									"Enter 5 to update New Release\n" +
									"Enter any other to return to search to update title\n"
						);
				choice = scanme.nextInt();
									
				switch (choice) {
					
					case 1: 
						double price;
						System.out.println("Enter the updated price:");
						
						
							price = Double.parseDouble(scan.nextLine());
						
						
						
						
						query = "UPDATE books\n" +
								"SET Price = '"+ price + "'\n" +
								"WHERE ISBN = '" + ISBN + "';";
						try (Connection con = DriverManager.getConnection(host, username, password)){
								Statement s = con.createStatement();
					            s.executeUpdate(query);
					            System.out.println("Price updated\n");	
						
						}catch(SQLException ex) {
						Logger lgr = Logger.getLogger(clientProgram.class.getName());
						lgr.log(Level.SEVERE, ex.getMessage(), ex);
						
				}
					break;
					
					case 2:
						double rentalPrice;
						System.out.println("Enter the updated rental price:");

						rentalPrice = Double.parseDouble(scan.nextLine());
						query = "UPDATE books\n" +
								"SET RentalPrice = '"+ rentalPrice + "'\n" +
								"WHERE ISBN = '" + ISBN + "';";
						try (Connection con = DriverManager.getConnection(host, username, password)){
								Statement s = con.createStatement();
					            s.executeUpdate(query);
					            System.out.println("Rental Price updated\n");
								
							
					}catch(SQLException ex) {
						Logger lgr = Logger.getLogger(clientProgram.class.getName());
						lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}

						
						break;
						
					case 3:
						int inv;
						System.out.println("Enter the updated Inventory:");
						inv = Integer.parseInt(scan.nextLine());
						
						
						
						query = "UPDATE books\n" +
								"SET Inventory = '"+ inv + "'\n" +
								"WHERE ISBN = '" + ISBN + "';";
						try (Connection con = DriverManager.getConnection(host, username, password)){
								Statement s = con.createStatement();
					            s.executeUpdate(query);
					            System.out.println("Inventory updated");	
						
					}catch(SQLException ex) {
						Logger lgr = Logger.getLogger(clientProgram.class.getName());
						lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}
					
						break;
					case 4:
						int aisle;
						System.out.println("Enter the updated Aisle Number:");
						aisle = Integer.parseInt(scan.nextLine());
						
						query = "UPDATE books\n" +
								"SET DisplayArea = '"+ aisle + "'\n" +
								"WHERE ISBN = '" + ISBN + "';";
						try (Connection con = DriverManager.getConnection(host, username, password)){
								Statement s = con.createStatement();
					            s.executeUpdate(query);
					            System.out.println("Title updated");
								
							
						
					}
						catch(SQLException ex) {
						Logger lgr = Logger.getLogger(clientProgram.class.getName());
						lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}

					break;
					
					case 5:
						int release;
						System.out.println("Enter the updated Release value\n"
										   +"If new enter 1 and if not new enter 0\n");
						release = Integer.parseInt(scan.nextLine());
						
						query = "UPDATE books\n" +
								"SET NewRelease = '"+ release + "'\n" +
								"WHERE ISBN = '" + ISBN + "';";
						try (Connection con = DriverManager.getConnection(host, username, password)){
								Statement s = con.createStatement();
					            s.executeUpdate(query);
					            System.out.println("Release updated");
								
							
						
					}
						catch(SQLException ex) {
						Logger lgr = Logger.getLogger(clientProgram.class.getName());
						lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}

						
					break;
						
					default:
						UpdateInventory();
						break;
				
				}
			}// end else if 3
			
			/*DELETE FROM DATABASE*/
			else if (choice == 4) {
				String query2 = "DELETE FROM books\r\n" +
								"WHERE ISBN = '" + ISBN + "';";
				
				try (Connection con = DriverManager.getConnection(host, username, password)){
					Statement s = con.createStatement();
		            s.executeUpdate(query2);
		            System.out.println("Book deleted from database");
						
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
			lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
			UpdateInventory();
				
			}
			
			else {
				while(choice != 1 || choice != 2 || choice != 3 || choice != 4) {
					System.out.println("Invalid Option!\n");
					System.out.println("1 to Continue Searching\n" + "2 to Return to Menu\n");
					choice = scanme.nextInt();
					if(choice == 1) {
						Search();
					}
					else if(choice == 2) {
						UserAccess();
					}
				}
			}
		}// end if
			
			else if (choice == 2) {
				
				addTitle();
				
			}
			
			else if (choice == 3) {
				AdminAccess();
			}
			else {
				System.out.println("Enter 1,2, or 3");
				UpdateInventory();
			}
			
			UpdateInventory();
		}//end UpdateInventory
		
		
		public static void addTitle() {
			Scanner scan = new Scanner(System.in);
			Scanner id = new Scanner(System.in);
			String title, isb;
			int inv , pages, release;
			double price, rentPrice;
			
			
			System.out.println("Enter the title of book you would like to add:");
			title = scan.nextLine();
			System.out.println("Enter the number of pages of book");
			pages = id.nextInt();
			System.out.println("Enter the ISBN of book");
			isb = scan.nextLine();
			System.out.println("Enter the current amount of books in stock");
			inv = id.nextInt();
			System.out.println("Enter the purchase price of the book");
			price = id.nextDouble();
			System.out.println("Enter the rental price of the book");
			rentPrice = id.nextDouble();
			getAuthor();
			displayGenre();
			displayFormats();
			getPublisher();
			System.out.println("If this book is a new release (released in the past 2 months) enter 1\n"
							  +"If this book was released more than 2 months ago enter 0\n");
			release = id.nextInt();
			
			;
			
			
			String query = "INSERT INTO books (Title, ISBN, Pages, Price, RentalPrice, GenreID, PublisherID, FormatID, Inventory, AuthorID, DisplayArea, NewRelease)\r\n" + 
					   "VALUES ('"+ title +"', '"+ isb +"',"+ pages +","+ price +","+ rentPrice +"," + genreID +","+ publisherID +","+ formatID +","+ inv + ","+ authorID +","+ aisleNum +"," + release +");";
			
			try (Connection con = DriverManager.getConnection(host, username, password)){
				Statement s = con.createStatement();
	            s.executeUpdate(query);
	            System.out.println("Title added\n");	
		
		}catch(SQLException ex) {
		Logger lgr = Logger.getLogger(clientProgram.class.getName());
		lgr.log(Level.SEVERE, ex.getMessage(), ex);
	}
			
			
		}
		
		
		public static void getAuthor() {
			Scanner scan = new Scanner(System.in);
			String authorName;
			System.out.println("Enter the first and last name of author or organization name");
			authorName = scan.nextLine();
			
			String query = "SELECT `AuthorID`, `Name` FROM authors;";
			int authID;
			String authName;
			
			try (Connection con = DriverManager.getConnection(host, username, password);
	        PreparedStatement pst = con.prepareStatement(query);
	        ResultSet rs = pst.executeQuery()) {
		
				while (rs.next()) {
				authID = rs.getInt(1);
				authName = rs.getString(2);
					if (authName.compareToIgnoreCase(authorName) == 0) {
						authorID = authID;
					}
					
					
				}
				
				
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
				lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
			
			if (authorID == 0) {
				
				query = "INSERT INTO authors (Name)\r\n" + 
						"VALUES ('" + authorName + "');";
				try (Connection con = DriverManager.getConnection(host, username, password)){
						Statement s = con.createStatement();
			            s.executeUpdate(query);	
			
				}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
				lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}
				
				query = "SELECT AuthorID, Name FROM authors;";
				try (Connection con = DriverManager.getConnection(host, username, password);
				        PreparedStatement pst = con.prepareStatement(query);
				        ResultSet rs = pst.executeQuery()) {
					
						while (rs.next()) {
							authID = rs.getInt(1);
							authName = rs.getString(2);
							if (authName.compareToIgnoreCase(authorName)== 0) {
								authorID = authID;
							}
								
						}
							
						}catch(SQLException ex) {
							Logger lgr = Logger.getLogger(clientProgram.class.getName());
							lgr.log(Level.SEVERE, ex.getMessage(), ex);
						}
				
				}
			
			}// end getAuthor()
			
			
		public static void displayGenre() {
			Scanner scan = new Scanner(System.in);
			String query = "SELECT GenreID, GenreName FROM genre";
			int genID;
			String genName;
			
			try (Connection con = DriverManager.getConnection(host, username, password);
	        PreparedStatement pst = con.prepareStatement(query);
	        ResultSet rs = pst.executeQuery()) {
				
				System.out.printf("%-10s %-40s\n","Genre ID","Genre Name");
				while (rs.next()) {
					genID = rs.getInt(1);
					genName = rs.getString(2);
					System.out.printf("%-10d %-40s\n", genID, genName);
				}
		
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
				lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
			
			System.out.println("Enter ID of genre that the book applies to");
			genreID = scan.nextInt();
			
			if (genreID == 1 || genreID == 5) {
				aisleNum = 1;
			}
			else if (genreID == 2 || genreID == 11 || genreID == 13 || genreID == 14) {
				aisleNum = 2;
			}
			else if (genreID == 3 || genreID == 8) {
				aisleNum = 3;
			}
			else if (genreID == 4 || genreID == 16) {
				aisleNum = 4;
			}
			else if (genreID == 6 || genreID == 7 || genreID == 10) {
				aisleNum = 5;
			}
			else if (genreID == 9 || genreID == 15 ) {
				aisleNum = 6;
			}
			else if (genreID == 12) {
				aisleNum = 7;
			}
			else if (genreID == 17) {
				aisleNum = 8;
			}
			
		}//end displayGenre
		
		
		public static void displayFormats () {
			Scanner format = new Scanner(System.in);
			String query = "SELECT FormatID, `book format`.BookType, `New/Used`\r\n" + 
					"FROM format\r\n" + 
					"INNER JOIN `book format` on `book format`.BookTypeID = format.BookTypeID";
			
			int fID;
			String bookType, newOrUsed;
			
			System.out.printf("%-10s %-12s %-13s\n","Format ID","Format","Condition");
			
			try (Connection con = DriverManager.getConnection(host, username, password);
			        PreparedStatement pst = con.prepareStatement(query);
			        ResultSet rs = pst.executeQuery()) {
						
					while(rs.next()) {
						fID = rs.getInt(1);
						bookType = rs.getString(2);
						newOrUsed = rs.getString(3);
						System.out.printf("%-10d %-12s %-13s\n",fID, bookType, newOrUsed);
					}
						
				
					}catch(SQLException ex) {
						Logger lgr = Logger.getLogger(clientProgram.class.getName());
						lgr.log(Level.SEVERE, ex.getMessage(), ex);
					}
			
			System.out.println("Enter the format ID number that pertains to the Format and Condition of the book you wish to add.");
			formatID = format.nextInt();
			
		}//end DisplayFormats
		
		
		public static void getPublisher() {
			
			Scanner scan1 = new Scanner(System.in);
			String publisherName;
			System.out.println("Enter the publisher of the book.");
			publisherName = scan1.nextLine();
			
			String query = "SELECT `PublisherID`, `PublisherName` FROM publishers;";
			int pubID;
			String pubName;
			
			try (Connection con = DriverManager.getConnection(host, username, password);
	        PreparedStatement pst = con.prepareStatement(query);
	        ResultSet rs = pst.executeQuery()) {
		
				while (rs.next()) {
				pubID = rs.getInt(1);
				pubName = rs.getString(2);
					if (pubName.compareToIgnoreCase(publisherName) == 0) {
						publisherID = pubID;
					}

				}
				
				
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
				lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
			
			if (publisherID == 0) {
				
				query = "INSERT INTO publishers (PublisherName)\r\n" + 
						"VALUES ('" + publisherName + "');";
				try (Connection con = DriverManager.getConnection(host, username, password)){
						Statement s = con.createStatement();
			            s.executeUpdate(query);	
			
				}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
				lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}
				
				query = "SELECT PublisherID, PublisherName FROM publishers;";
				try (Connection con = DriverManager.getConnection(host, username, password);
				        PreparedStatement pst = con.prepareStatement(query);
				        ResultSet rs = pst.executeQuery()) {
					
						while (rs.next()) {
							pubID = rs.getInt(1);
							pubName = rs.getString(2);
							if (pubName.compareToIgnoreCase(pubName)== 0) {
								publisherID = pubID;
							}
								
						}
							
						}catch(SQLException ex) {
							Logger lgr = Logger.getLogger(clientProgram.class.getName());
							lgr.log(Level.SEVERE, ex.getMessage(), ex);
						}
				
				}
			
			
		}//end getPublisher
	
	
	
		public static void CheckUserBal() {
			double fee;
			Scanner scan = new Scanner(System.in);
			String query = "SELECT users.UserID, FirstName, LastName, Email, LateFee, books.Title, rentals.CheckoutDate, rentals.DueDate\r\n" + 
					"FROM users\r\n" + 
					"INNER JOIN rentals on rentals.UserID = users.UserId\r\n" + 
					"INNER JOIN books on books.BookID = rentals.BookID\r\n" + 
				    "WHERE users.NumRentals > 0;";
			//System.out.println(query);
			int uID;
			String fName, lName, mail, title;
			Date checkout, dateDue;
			double lateFee;
			System.out.println("USER BALANCES");
			System.out.println("-------------");
			try (Connection con = DriverManager.getConnection(host, username, password);
			        PreparedStatement pst = con.prepareStatement(query);
			        ResultSet rs = pst.executeQuery()) {
						
						System.out.printf("%-10s %-10s %-10s %-25s %-10s %-60s %-15s %-15s\n","User ID","First Name","Last Name","Email","Late Fee","Title","Checkout Date","Due Date");
						while (rs.next()) {
							uID = rs.getInt(1);
							fName = rs.getString(2);
							lName = rs.getString(3);
							mail = rs.getString(4);
							lateFee = rs.getDouble(5);
							title = rs.getString(6);
							checkout = rs.getDate(7);
							dateDue = rs.getDate(8);
							
							System.out.printf("%-10d %-10s %-10s %-25s %-10.2f %-60s %-15s %-15s\n",uID,fName,lName,mail,lateFee,title,checkout,dateDue);
						}
				
					}catch(SQLException ex) {
						Logger lgr = Logger.getLogger(clientProgram.class.getName());
						lgr.log(Level.SEVERE, ex.getMessage(), ex);
					}
			System.out.println("Enter 1 to apply late fees to a specific user.\n" +
							   "Enter 2 to return to menu\n");
			choice = scan.nextInt();
			
			if (choice == 1) {
				
				System.out.println("Enter user ID you would like to apply late fees to.\n");
				choice = scan.nextInt();
				
				System.out.println("Enter amount you would like to apply to user's account");
				fee = scan.nextDouble();
				
				String query2 = "UPDATE users "+
								"SET LateFee ="+fee+"" +
								" WHERE UserID ="+choice+";";
				try (Connection con = DriverManager.getConnection(host, username, password)){
					Statement s = con.createStatement();
		            s.executeUpdate(query2);
		            System.out.println("Late fee applied to user\n");	
			
			}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
			lgr.log(Level.SEVERE, ex.getMessage(), ex);
	}
				
				
				
			}
			
			else if (choice == 2) {
				
				
				AdminAccess();
				
			}
			
			CheckUserBal();
			
		}
	//CHANGED
	public static void GenerateReports() {
	Scanner scan = new Scanner(System.in);
		System.out.println("Enter 1 for revenue reports by title\n"
						  +"Enter 2 for revenue reports by genre\n"
						  + "Enter 3 for revenue by year, month and week\n"
						  +"Enter 4 to return to  admin menu.\n");
		
		choice = Integer.parseInt(scan.nextLine());
		switch (choice) {
		
		case 1:
			System.out.println("Enter 1 to search for reports by title\n"
							  +"Enter 2 to generate all reports by title\n");
			choice = Integer.parseInt(scan.nextLine());
			
			if (choice == 1) {
				
				System.out.println("Search the exact title:\n");
				userString = scan.nextLine();
				
				String query = "SELECT books.Title, sum(Total) AS REVENUE\r\n" + 
						"FROM `order item`\r\n" + 
						"INNER JOIN books ON books.BookID =`order item`.BookID\r\n" + 
						"WHERE books.Title LIKE '"+userString+"'"+
						"GROUP BY books.Title;";
				
				
				try (Connection con = DriverManager.getConnection(host, username, password);
		                PreparedStatement pst = con.prepareStatement(query);
		                ResultSet rs = pst.executeQuery()) {
					String title;
					double revenue;
					
					System.out.println("REVENUE REPORT BY TITLE");
					System.out.println("-----------------------");
					System.out.printf("%-60s %-10s\n","Title","Revenue");
					while (rs.next()) {
						
						title = rs.getString(1);
						revenue = rs.getDouble(2);
						
						System.out.printf("%-60s %-10.2f\n",title,revenue);
						
						
		            }
					
				}catch(SQLException ex) {
					Logger lgr = Logger.getLogger(clientProgram.class.getName());
		            lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}
				System.out.println();
				GenerateReports();
				
			}
			else if (choice == 2) {
				
				String query = "SELECT books.Title, sum(Total) AS Revenue\r\n" + 
						"FROM `order item`\r\n" + 
						"INNER JOIN books ON books.BookID =`order item`.BookID\r\n" + 
						"GROUP BY books.Title;";
				
				try (Connection con = DriverManager.getConnection(host, username, password);
		                PreparedStatement pst = con.prepareStatement(query);
		                ResultSet rs = pst.executeQuery()) {
					String title;
					double revenue;
					System.out.println("REVENUE REPORT BY TITLE");
					System.out.println("-----------------------");
					System.out.printf("%-60s %-10s\n","Title","Revenue");
					while (rs.next()) {
						
						title = rs.getString(1);
						revenue = rs.getDouble(2);
						
						System.out.printf("%-60s %-10.2f\n",title,revenue);
						
						
		            }
					
				}catch(SQLException ex) {
					Logger lgr = Logger.getLogger(clientProgram.class.getName());
		            lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}
				
				System.out.println();
				GenerateReports();
				
			}
			
			break;
			
		case 2:
			
			
			System.out.println("Enter 1 to search for reports by genre\n"
					  +"Enter 2 to generate all reports by genre\n");
	choice = Integer.parseInt(scan.nextLine());
	
	if (choice == 1) {
		
		System.out.println("Search the genre:\n");
		userString = scan.nextLine();
		
		String query = "SELECT genre.GenreName, sum(Total) AS Revenue\r\n" + 
				"FROM `order item`\r\n" + 
				"INNER JOIN books ON books.BookID =`order item`.BookID\r\n" + 
				"INNER JOIN genre ON genre.GenreID = books.GenreID\r\n" + 
				"WHERE genre.GenreName LIKE \"%"+userString+"%\"\r\n" + 
				"GROUP BY genre.GenreName;";
	
		
		try (Connection con = DriverManager.getConnection(host, username, password);
              PreparedStatement pst = con.prepareStatement(query);
              ResultSet rs = pst.executeQuery()) {
			String genre;
			double revenue;
			
			System.out.println("REVENUE REPORT BY GENRE");
			System.out.println("-----------------------");
			System.out.printf("%-35s %-10s\n","Title","Revenue");
			while (rs.next()) {
				
				genre = rs.getString(1);
				revenue = rs.getDouble(2);
				
				System.out.printf("%-35s %-10.2f\n",genre,revenue);
				
				
          }
			
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
          lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		System.out.println();
		GenerateReports();
		
	}
	
	else if (choice == 2) {
		
		String query = "SELECT genre.GenreName, sum(Total) AS Revenue\r\n" + 
				"FROM `order item`\r\n" + 
				"INNER JOIN books ON books.BookID =`order item`.BookID\r\n" + 
				"INNER JOIN genre ON genre.GenreID = books.GenreID\r\n" + 
				"GROUP BY genre.GenreName;";
		
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query);
                ResultSet rs = pst.executeQuery()) {
			String genre;
			double revenue;
			
			System.out.println("REVENUE REPORT BY GENRE");
			System.out.println("-----------------------");
			System.out.printf("%-35s %-10s\n","Title","Revenue");
			while (rs.next()) {
				
				genre = rs.getString(1);
				revenue = rs.getDouble(2);
				
				System.out.printf("%-35s %-10.2f \n",genre,revenue);
				
				
            }
			
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		System.out.println();
		GenerateReports();
		
	}
			
			break;
		
		case 3:
			
			System.out.println("Enter 1 to see reports by year\n"+
								"Enter 2 to see reports by month\n"+
								"Enter 3 to see reports by week\n");
			choice = Integer.parseInt(scan.nextLine());
			
			
			if (choice == 1) {
			String year;
			String query = "SELECT YEAR(`order item`.OrderDate), sum(Total) AS REVENUE\r\n" + 
					"FROM `order item`\r\n" + 
					"GROUP BY YEAR(OrderDate);";
			
			try (Connection con = DriverManager.getConnection(host, username, password);
	                PreparedStatement pst = con.prepareStatement(query);
	                ResultSet rs = pst.executeQuery()) {
				
				double revenue;
				System.out.println("REVENUE REPORT BY YEAR");
				System.out.println("----------------------");
				System.out.printf("%-12s %-10s\n","Year","Revenue");
				while (rs.next()) {
					
					year = rs.getString(1);
					revenue = rs.getDouble(2);
					
					System.out.printf("%-12s %-10.2f \n",year,revenue);
					
					
	            }
				
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
	            lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
			
			System.out.println();
			GenerateReports();
			
		}
			
			else if(choice == 2) {
				
				String query = "SELECT MONTH(`order item`.OrderDate), sum(Total) AS REVENUE\r\n" + 
						"FROM `order item`\r\n" + 
						"GROUP BY MONTH(OrderDate);";
				
				
				try (Connection con = DriverManager.getConnection(host, username, password);
		                PreparedStatement pst = con.prepareStatement(query);
		                ResultSet rs = pst.executeQuery()) {
					String month;
					
					double revenue;
					
					System.out.println("REVENUE REPORT BY MONTH");
					System.out.println("-----------------------");
					System.out.printf("%-12s %-10s\n","Month","Revenue");
					while (rs.next()) {
						
						month = rs.getString(1);
						revenue = rs.getDouble(2);
						switch (month) {
						
						case "1":
							month = "January";
							break;
						case "2":
							month = "February";
							break;
						case "3":
							month = "March";
							break;
						case "4":
							month = "April";
							break;
						case "5":
							month = "May";
							break;
						case "6":
							month = "June";
							break;
						case "7":
							month = "July";
							break;
						case "8":
							month = "August";
							break;
						case "9":
							month = "September";
							break;
						case "10":
							month = "October";
							break;
						case "11":
							month = "November";
							break;
						case "12":
							month = "December";
							break;
							
						
						}
						
						System.out.printf("%-12s %-10.2f \n",month,revenue);
						
						
		            }
					
				}catch(SQLException ex) {
					Logger lgr = Logger.getLogger(clientProgram.class.getName());
		            lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}
				System.out.println();
				GenerateReports();
				
			}
		
			else if (choice == 3) {
				String year;
				String query = "SELECT `order item`.OrderDate, sum(Total) AS REVENUE\r\n" + 
						"FROM `order item`\r\n" + 
						"GROUP BY WEEK(OrderDate);";
				
				try (Connection con = DriverManager.getConnection(host, username, password);
		                PreparedStatement pst = con.prepareStatement(query);
		                ResultSet rs = pst.executeQuery()) {
					
					double revenue;
					
					System.out.println("REVENUE REPORT BY WEEK");
					System.out.println("----------------------");
					System.out.printf("%-12s %-10s\n","Week of","Revenue");
					while (rs.next()) {
						
						year = rs.getString(1);
						revenue = rs.getDouble(2);
						
						System.out.printf("%-12s %-10.2f \n",year,revenue);
						
						
		            }
					
				}catch(SQLException ex) {
					Logger lgr = Logger.getLogger(clientProgram.class.getName());
		            lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}
				System.out.println();
				
				GenerateReports();
				
			}
			
			
			break;
			
		case 4:
			
			AdminAccess();
			
			
		default:
			GenerateReports();
			
		
		}
		
		
	}
	
	public static void UserAccess() {
		if(signedIn == false) {
		System.out.println("Enter 1 to Search\n"
				+  "Enter 2 to Checkout(rent)/buy\n"
				+  "Enter 3 for Returns\n"
				+  "Enter 4 to Check/Pay Balance and Late Fees\n"
				+  "Enter 5 to Log In\n"
				+  "Enter 6 to Create Account\n"
				+  "Enter 7 to Return to Main Menu");
		}
		else {
			System.out.println("Enter 1 to Search\n"
					+  "Enter 2 to Checkout(rent)/buy\n"
					+  "Enter 3 for Returns\n"
					+  "Enter 4 to Check/Pay Balance and Late Fees\n"
					+  "Enter 5 to Log In\n"
					+  "Enter 6 to Create Account\n"
					+  "Enter 7 to Return to Main Menu\n"
					+  "Enter 8 to Log Out\n");
		}
		choice = scanner.nextInt();
		
		switch (choice) {
		case 1: 
			Search();
			break;
		case 2: 
			Cart();
			break;
		case 3:
			Return();
			break;
		case 4:
			Balance();
			break;
		case 5:
			LogIn();
			break;
		case 6: 
			CreateAccount();
			break;
		case 7:
			MainMenu();
			break;
		case 8:
			LogOut();
			break;
			
		default:
			System.out.println("Not A Valid Option!\n");
			UserAccess();
		}
		
	}// end UserAccess
	
	
	// CHANGED
	public static void Search() { 
		Scanner scan = new Scanner(System.in);
		System.out.println("Search by title, genre or author:\n"+
							"Hit \"enter\" to see our full list of books.");
		
		userString = scan.nextLine();
		//System.out.println(userString);
		//System.out.println("WHERE authors.FirstName LIKE \'" + userString + "\' OR authors.LastName LIKE \'" + userString + "\' OR books.Title LIKE \'" + userString + "\' OR books.ISBN LIKE \'" + userString + "\' OR genre.GenreName LIKE \'" + userString + "\'");
		// SQL code here to search tables for books by input.
		String query = "SELECT Title, authors.Name, ISBN, Price, RentalPrice, genre.GenreName, publishers.PublisherName, format.`New/used`, `book format`.BookType , Inventory\r\n" + 
				"FROM books\r\n" +  
				"INNER JOIN genre on genre.GenreID = books.GenreID\r\n" + 
				"INNER JOIN publishers on publishers.PublisherID = books.PublisherID\r\n" + 
				"INNER JOIN `format` on format.`FormatID` = books.FormatID\r\n" + 
				"INNER JOIN `book format` on `book format`.BookTypeID = format.`BookTypeID`\r\n" + 
				"INNER JOIN authors on authors.AuthorID = `books`.AuthorID\r\n" + 
				"WHERE books.DisplayArea > " + 0 + " AND " +
				"(authors.Name LIKE \'%" + userString + "%\' OR " +
				"books.Title LIKE \'%" + userString + "%\' OR " +
			    "books.ISBN LIKE \'" + userString + "\' OR " +
				"genre.GenreName LIKE \'%" + userString + "%\')" +
				"ORDER BY books.Title ASC;";
			
		
		
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query);
                ResultSet rs = pst.executeQuery()) {
			String var1, var2, var3, var4, var5, var6, var7, var8, var9;
			String inv;
			int var10;
			
			System.out.printf("%-90s %-30s %-20s %-10s %-14s %-30s %-40s %-15s %-16s %-10s %-1s\n","Title","Name","ISBN","Price","Rental Price","Genre","Publisher","Condition","Format","Inv", "");
			System.out.println("------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			while (rs.next()) {
				
				var1 = rs.getString(1);
				var2 = rs.getString(2);
				var3 = rs.getString(3);
				var4 = rs.getString(4);
				var5 = rs.getString(5);
				var6 = rs.getString(6);
				var7 = rs.getString(7);
				var8 = rs.getString(8);
				var9 = rs.getString(9);
				var10 = rs.getInt(10);
				
				if (var10 > 0) {
					inv = "IN STOCK";
					
				}
				else {
					inv = "OUT OF STOCK";
				}
				System.out.printf("%-90s %-30s %-20s %-10s %-14s %-30s %-40s %-15s %-16s %-10s\n", var1,  var2,  var3,  var4,  var5,  var6,  var7,  var8,  var9,  inv);
				
            }
			
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		System.out.println();
		System.out.println("1 to Continue Searching\n"+ "2 to Add to Cart\n" + "3 to Return to Menu\n");		
		choice = scan.nextInt();
		if(choice == 1) {
			Search();
		}
		else if(choice == 2) {
			addToCart();
		}
		
		else if (choice == 3) {
			UserAccess();
		}
		else {
			while(choice != 1 || choice != 2 || choice != 3) {
				System.out.println("Invalid Option!\n");
				System.out.println("1 to Continue Searching\n" + "2 to Return to Menu\n");
				choice = scan.nextInt();
				if(choice == 1) {
					Search();
				}
				else if(choice == 2) {
					UserAccess();
				}
			}
		}
		
		//System.out.println("userID: " + userID);		
		// Allow them to add items to shopping cart 
	}// end Search()
	

	// CHANGED
	public static void addToCart() {
		Random rand = new Random();
		int guestNumber = rand.nextInt(1000000);
		Scanner scan = new Scanner(System.in);
		
		if (userEmail == null && userPass == null) {
			System.out.println("Would you like to log in or create an account first?\n"
							+ "Enter 1 to create account\n"
							+ "Enter 2 to log in.\n"
							+ "Enter 3 to continue as guest");
			choice = scanner.nextInt();
			if (choice == 1) {
				CreateAccount();
				
			}
			
			else if (choice == 2) {
				LogIn();
			}
			
			else if (choice == 3) {
				userPass = "guest";
				guest = "guest" + guestNumber;
				userEmail = guest;
				createGuestAccount();
			}
			
			else  {
				while (choice != 1 || choice != 2 || choice !=3) {
					System.out.println("Invalid Option!");
					addToCart();
					
				}
			}
		}
		
		System.out.println("Enter ISBN of book you would like to add.");
		ISBN = scan.nextLine();
		
		String query2 = "SELECT Inventory \r\n" + 
				"FROM books\r\n" + 
				"WHERE ISBN = '"+ISBN+"';";
		
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query2);
                ResultSet rs = pst.executeQuery()) {
			
			while (rs.next()) {
				inventory = rs.getInt(1);
				
            }
			
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		if (inventory <= 0) {
			System.out.println("This book is currently out of stock. We apologize for the inconvenience!\n");
			Search();
		}
		
		else {
		
		
		System.out.println("Enter number of copies.\n");
		int Quantity = scan.nextInt();
		String query ="INSERT INTO `shopping cart` (UserID, BookID, BookTitle, Quantity, Price, RentalPrice,ISBN) VALUES (\r\n" + 
				"   (SELECT UserId FROM users WHERE Email IN ('" + userEmail + "')),\r\n" + 
				"   (SELECT BookID FROM books WHERE ISBN IN ('" + ISBN + "')),\r\n" + 
				"	(SELECT Title FROM books WHERE ISBN IN ('" + ISBN + "')),\r\n" + 
				     Quantity + ",\r\n" + 
				"	(SELECT Price FROM books WHERE ISBN IN ('" + ISBN + "')),	\r\n " + 
				"	(SELECT RentalPrice FROM books WHERE ISBN IN ('" + ISBN + "')),	\r\n " +     
				"   (SELECT ISBN FROM books WHERE ISBN IN ('" + ISBN + "'))     \r\n " +
				");";
		
		
		  try  (Connection con = DriverManager.getConnection(host, username, password)) {
			
            Statement s = con.createStatement();
            s.executeUpdate(query);
            System.out.println("Item added to cart!");
			
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		while(true) {
			UserAccess();
		}
		}
	}// end addToCart()
	
	public static void removeFromCart() {
		String query = "DELETE FROM `shopping cart`\r\n" + 
				"where `shopping cart`.ISBN LIKE '" + userString +"' AND `shopping cart`.UserID = '" + userID + "';";
			
		try (Connection con = DriverManager.getConnection(host, username, password))
				  {
				Statement s = con.createStatement();
				s.executeUpdate(query);
				System.out.println("Item removed from cart");
		
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
	}// end removeFromCart
	
	public static void updateQuantity() {
		Scanner scan1 = new Scanner(System.in);
		int inventoryAmount = 0;
		String query = "SELECT Inventory\r\n" + 
				"FROM `books`\r\n" + 
				"WHERE ISBN = '" + userString +"';";
		
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query);
                ResultSet rs = pst.executeQuery()) {
			
				while(rs.next()) {
					inventoryAmount = rs.getInt(1);
				}
		
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
			lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		System.out.println("Enter quantity number");
		int userNum = scan1.nextInt();
		
		if(userNum >= 0 && userNum <= inventoryAmount) {
			String query1 = "UPDATE `shopping cart`\r\n" + 
					"SET Quantity = '" + userNum +"'\r\n" + 
					"WHERE ISBN = '" + userString + "';";
			         
			try (Connection con = DriverManager.getConnection(host, username, password)) {
	                	 Statement s = con.createStatement();
	                     s.executeUpdate(query1);
	                     System.out.println("Item updated");
			
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
				lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
			
			Cart();
			
		}
		else {
			System.out.println("Invalid amount!");
			updateQuantity();
		}

	}
	
	//CHANGED
	public static void Cart() {//checkout
		//SELECT
		//lets customers and users look at their current shopping cart.
		//They can rent/purchase from here and also remove
		Scanner scan = new Scanner(System.in);
	

String query = "SELECT DISTINCT `shopping cart`.BookTitle, `shopping cart`.ISBN ,`shopping cart`.Quantity, `shopping cart`.Price, `shopping cart`.RentalPrice \r\n" + 
		"FROM `shopping cart`\r\n" + 
		"WHERE UserID = '" + userID +"'\r\n" + 
		"GROUP BY `shopping cart`.BookID;";
System.out.println("CART");
System.out.println("----");
System.out.printf("%-85s %-15s %-10s %-10s %-20s \n", "Title", "ISBN"  ,"Quantity",  "Price", "Rental Price");
	
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query);
                ResultSet rs = pst.executeQuery()) {
			String title, ISBN;
			int quantity;
			double price, rentalPrice;	
	
			while (rs.next()) {
				title = rs.getString(1);
				ISBN = rs.getString(2);
				quantity = rs.getInt(3);
				price = rs.getDouble(4);
				rentalPrice = rs.getDouble(5);
				System.out.printf("%-85s %-15s %-10d %-10.2f %-20.2f\n", title, ISBN, quantity, price, rentalPrice);
				
            }
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		
		System.out.println("\nIf you would like to remove an item enter 1\n"
						 + "If you would like to update the quantity of an item enter 2\n"
						 + "If you would like to rent/purchase an item enter 3\n"
						 + "To continue to check out enter 4\n"
						 + "To return to menu enter 5\n");
		choice = scanner.nextInt();
		
			if (choice == 1) {
				System.out.println("Enter the ISBN of the book you wish to remove.");
				userString = scan.nextLine();
				removeFromCart();
				
			}
			
			else if(choice == 2) {
				System.out.println("Enter the ISBN of the book you wish to update.");
				userString = scan.nextLine();
				updateQuantity();
			}
			
			else if (choice == 3) {
				
				if (signedIn == true) {
				System.out.println("Enter 1 to select titles to purchase\n" + 
								   "Enter 2 to select titles to rent\n");
				choice = scanner.nextInt();
				
				if(choice == 1) {
					System.out.println("Enter ISBN you would like to purchase:\n");
					ISBN = scan.nextLine();
					Purchase();
				}
				
				
				String query5 = "SELECT Quantity \r\n" + 
						"FROM `shopping cart`\r\n" + 
						"WHERE UserID = '" + userID +"' AND ISBN = '"+ ISBN + "'\r\n;";
				
				
						try (Connection con = DriverManager.getConnection(host, username, password);
				                PreparedStatement pst = con.prepareStatement(query5);
				                ResultSet rs = pst.executeQuery()) {
							//int quantity;
					
							while (rs.next()) {
								 quantity = rs.getInt(1);
								
				            }
						}catch(SQLException ex) {
							Logger lgr = Logger.getLogger(clientProgram.class.getName());
				            lgr.log(Level.SEVERE, ex.getMessage(), ex);
						}
				
				
				
				if(choice == 2) {
					System.out.println("Enter ISBN you would like to rent:\n");
					ISBN = scan.nextLine();
					RentCount();
					if(rentCount >= 3 || rentCount + quantity >= 3){
						System.out.println("This quantity exceeds rental limit (2)\n" + "If you currently have 2 rentals checked out return one to rent another one.\n");
						Cart();
					}
					
					else {
					Rent();
					}
				}
				
				Cart();
				
			}
				
				else {
					System.out.println("Enter 1 to select titles to purchase\n" + 
							   		   "If you would like to rent a book log in or create an account\n"+
										"Enter 2 to log in.\n" +
							   		   	"Enter 3 to create an account");
			choice = scanner.nextInt();
			
			if(choice == 1) {
				System.out.println("Enter ISBN you would like to purchase:\n");
				ISBN = scan.nextLine();
				Purchase();
			}
			
			else if (choice == 2) {
				LogIn();
			}
			else if (choice == 3) {
				CreateAccount();
			}
			else {
				while (choice != 1 || choice != 2 || choice !=3) {
				System.out.println("Invalid option!\n");
				
				System.out.println("Enter 1 to select titles to purchase\n" + 
				   		   "If you would like to rent a book log in or create an account\n"+
							"Enter 2 to log in.\n" +
				   		   	"Enter 3 to create an account");
					choice = scanner.nextInt();

					if(choice == 1) {
						System.out.println("Enter ISBN you would like to purchase:\n");
						ISBN = scan.nextLine();
						Purchase();
					}

					else if (choice == 2) {
						LogIn();
					}
					else if (choice == 3) {
						CreateAccount();
					}
				
				}
				
			}
					
				}
			}
			
			
			if(choice == 4) {
				sum = 0;
				String query1 = "SELECT books.Title, Invoice.Quantity, Invoice.Price, sum(Invoice.Quantity * Invoice.Price) \r\n" + 
						"FROM Invoice\r\n" + 
						"INNER JOIN books ON books.BookID = Invoice.BookID\r\n" + 
						"WHERE Invoice.UserID LIKE '" + userID +"'"
						+ " GROUP BY Invoice.BookID;\r\n";
			
				//System.out.println("userEmail: " + userEmail);
				System.out.println("ITEMS SELECTED");
				System.out.println("--------------");
				System.out.printf("%-85s %-10s %-10s\n", "Title", "Quantity",  "Price");
					
						try (Connection con = DriverManager.getConnection(host, username, password);
				                PreparedStatement pst = con.prepareStatement(query1);
				                ResultSet rs = pst.executeQuery()) {
							String title;
							int quantity;
							double price;
					
							while (rs.next()) {
								title = rs.getString(1);
								quantity = rs.getInt(2);
								price = rs.getDouble(3);
								total = rs.getDouble(4);
								sum = sum + total;
								System.out.printf("%-85s %-10d %-10.2f \n", title, quantity, price);
								
				            }
						}catch(SQLException ex) {
							Logger lgr = Logger.getLogger(clientProgram.class.getName());
				            lgr.log(Level.SEVERE, ex.getMessage(), ex);
						}
						total = sum;
				System.out.printf("\n\t\t\t\t\t\t\t\t\t\t          Total: %.2f\n\n", sum);
				System.out.println("Enter 1 to confirm transaction\n" + "Enter 2 to cancel transaction\n" + "Enter 3 to continue shopping\n");
				choice = scan.nextInt();
				if(choice == 1) {
					//create customer
					String query2 = " SELECT CustomerID, Email FROM customers;";
					int cusID;
					String cusEmail;
					
					try (Connection con = DriverManager.getConnection(host, username, password);
			                PreparedStatement pst = con.prepareStatement(query2);
			                ResultSet rs = pst.executeQuery()) {
					
				
						while (rs.next()) {
							cusID = rs.getInt(1);
							cusEmail = rs.getString(2);
							
							if(cusEmail.compareToIgnoreCase(userEmail) == 0) {
								customerID = cusID;
							}
							
			            }
					}catch(SQLException ex) {
						Logger lgr = Logger.getLogger(clientProgram.class.getName());
			            lgr.log(Level.SEVERE, ex.getMessage(), ex);
					}
					
					if(customerID == 0) {
						CreateCustomer();
					}
					else {
						custEmail = userEmail;
					}

					
					String query5 = "SELECT Quantity\r\n" + 
							"FROM Invoice\r\n" + 
							"WHERE UserID = '" + userID +"' AND Rented = "+ 1 + "\r\n;";
						
							try (Connection con = DriverManager.getConnection(host, username, password);
					                PreparedStatement pst = con.prepareStatement(query5);
					                ResultSet rs = pst.executeQuery()) {
								//int quantity;
						
								while (rs.next()) {
									 quantity = rs.getInt(1);
									 if (quantity + rentCount > 3) {
										 flag = 0;
									 }
									
					            }
							}catch(SQLException ex) {
								Logger lgr = Logger.getLogger(clientProgram.class.getName());
					            lgr.log(Level.SEVERE, ex.getMessage(), ex);
							}
							
							int rent;
							
							String query6 = "SELECT Rented FROM Invoice\r\n" + 
											"WHERE Rented = 1 AND UserID = "+userID+";";
								
									try (Connection con = DriverManager.getConnection(host, username, password);
							                PreparedStatement pst = con.prepareStatement(query6);
							                ResultSet rs = pst.executeQuery()) {
									
								
										while (rs.next()) {
											rent = rs.getInt(1);
											 if (rent == 1) {
												 rented = 1;
											 }
											
							            }
									}catch(SQLException ex) {
										Logger lgr = Logger.getLogger(clientProgram.class.getName());
							            lgr.log(Level.SEVERE, ex.getMessage(), ex);
									}
							
							
							
							
					
							CreateOrder();
							
					
					if(flag == 1 && rented == 1 ) {
						
					    CreateRental();
						}
					else if (flag == 0 || rentCount > 3) {
						System.out.println("Maximum number of rentals [2] currently checked out\n Return a rental to rent a new item.\n");
						Cart();
					}
					
					
					String query3 = "SELECT BookID\r\n" + 
							"FROM invoice\r\n" + 
							"WHERE UserID = "+userID+";";
					
					String query4 = "DELETE `shopping cart` \r\n" + 
							"FROM `shopping cart`\r\n" + 
							"WHERE UserID = "+userID+" AND BookID ="+bID+";";
					
					try (Connection con = DriverManager.getConnection(host, username, password);
			                PreparedStatement pst = con.prepareStatement(query3);
			                ResultSet rs = pst.executeQuery()) {
					
				
						while (rs.next()) {
							bID = rs.getInt(1);
							
							try (Connection con1 = DriverManager.getConnection(host, username, password)){
								Statement s = con1.createStatement();
					            s.executeUpdate(query4);
					            	
						
							}catch(SQLException ex) {
								Logger lgr = Logger.getLogger(clientProgram.class.getName());
								lgr.log(Level.SEVERE, ex.getMessage(), ex);
							}	 
							
			            }
					}catch(SQLException ex) {
						Logger lgr = Logger.getLogger(clientProgram.class.getName());
			            lgr.log(Level.SEVERE, ex.getMessage(), ex);
					}
					
					
					deleteInvoice();
					deleteInvoice();
					
				}
				
				else if (choice == 2) {
					//cancel transaction
					//delete invoice
					//reset NumRentals in users
					deleteInvoice();
					
					
					
					
				}
				else if(choice == 3) {
					Cart();
				}
				else {
					while(choice != 1 || choice != 2 || choice != 3) {
						System.out.println("Invalid option!\n");
						System.out.println("Enter 1 to confirm transaction\n" + "Enter 2 to cancel transaction\n" + "Enter 3 to continue shopping\n");
						choice = scan.nextInt();
					}
				}
				
			}
			
			else if (choice == 5) {
				UserAccess();
			}
			
			
			
			
			
			
	}// end Cart()
	
	
	
	public static void deleteInvoice() {
		String query = "DELETE FROM Invoice\r\n" + 
						"WHERE userID =" + userID+";";
		
		
		try  (Connection con = DriverManager.getConnection(host, username, password)) {
			
	        Statement s = con.createStatement();
	        s.executeUpdate(query);
			
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
	        lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
		  
		}// end deleteInvoice()
	
	
	public static void Purchase() {
		int Rented = 0;		
		
	String query ="INSERT INTO `Invoice` (UserID,BookID, Quantity, Price, Rented, Total) VALUES (\r\n" + 
				 "(SELECT UserID FROM `users` WHERE Email IN ('" + userEmail +"'))," +
				"   (SELECT BookID FROM `shopping cart` WHERE ISBN IN ('" + ISBN +"') AND UserID IN ('" + userID +"')),\r\n" + 
				"   (SELECT Quantity FROM `shopping cart` WHERE ISBN IN ('" + ISBN +"') AND UserID IN ('" + userID +"')),\r\n" + 
				"	(SELECT Price FROM `shopping cart` WHERE ISBN IN ('" + ISBN +"') AND UserID IN ('"+ userID +"')),\r\n" + 
				    Rented + "," +
				    "(SELECT sum(Quantity * Price) FROM `shopping cart` WHERE ISBN IN ('" + ISBN + "') AND UserID IN ('"+ userID +"')));";
		//System.out.println(query);
		
		  try  (Connection con = DriverManager.getConnection(host, username, password)) {
			  
			
            Statement s = con.createStatement();
            s.executeUpdate(query);
       
            System.out.println("Item selected as purchased");
			
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		  
	}
	
	
	
	public static void Rent() {
		
		String query3 = "SELECT LateFee FROM users\r\n" + 
				"WHERE UserID = "+ userID +";";
		
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query3);
                ResultSet rs = pst.executeQuery()) {
		
	
			while (rs.next()) {
				fee2 = rs.getDouble(1);
            }
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		if(fee2 == 0) {
	
		int Rented = 1;
	
	 String query ="INSERT INTO `Invoice` (UserID, BookID, Quantity, Price, Rented, Total) VALUES (\r\n" + 
			 "(SELECT UserID FROM `users` WHERE Email IN ('" + userEmail +"'))," +
			"   (SELECT BookID FROM `shopping cart` WHERE ISBN IN ('" + ISBN + "') AND UserID IN ('" + userID +"')),\r\n" + 
			"   (SELECT Quantity FROM `shopping cart` WHERE ISBN IN ('" + ISBN + "') AND UserID IN ('" + userID +"')),\r\n" + 
			"	(SELECT RentalPrice FROM `shopping cart` WHERE ISBN IN ('" + ISBN + "') AND UserID IN ('"+ userID +"')),\r\n" + 
			    Rented + "," +
			    "(SELECT sum(Quantity * RentalPrice) FROM `shopping cart` WHERE ISBN IN ('" + ISBN + "') AND UserID IN ('"+ userID +"')));";
	 //System.out.println(query);
	 String query2 = "UPDATE users\r\n" + 
	 		"SET NumRentals = NumRentals + 1\r\n" + 
	 		"WHERE userId = "+ userID + ";";
	 
	
	
	  try  (Connection con = DriverManager.getConnection(host, username, password)) {
		
        Statement s = con.createStatement();
        s.executeUpdate(query);
        s.executeUpdate(query2);
   
        System.out.println("Item selected as rented");
		
	}catch(SQLException ex) {
		Logger lgr = Logger.getLogger(clientProgram.class.getName());
        lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
	  
		}
		else {
			System.out.println("Outstanding late fee! Pay your balance to rent");
		}
	  
	}// end Rented
	
	public static void RentCount() {
		String query = "SELECT NumRentals\r\n" + 
				"FROM users\r\n" + 
				"WHERE UserID = '"+userID+"';";
		
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query);
                ResultSet rs = pst.executeQuery()) {

			while (rs.next()) {
				rentCount = rs.getInt(1);
            }
			
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
	}
	
	
	//CHANGED
public static void CreateOrder() {
		
	if ((flag == 1  && rented == 0)||(flag == 1 && rented == 1)) {
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		String date1 = df.format(date);
		Date utilDate;
		try {
			utilDate = new SimpleDateFormat("yyyy-MM-dd").parse(date1);
			java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
			
			String query = "INSERT INTO `orders` (CustomerID, OrderDate, Total) VALUES (\r\n" + 
					"   (SELECT CustomerID FROM customers WHERE Email IN ('" + custEmail +"')),\r\n" + 
					"   '"+ sqlDate +"',\r\n" + 
					"	'"+ total + "'       \r\n" + 
					" );";
			System.out.println(query);
			try  (Connection con = DriverManager.getConnection(host, username, password)) {
				
		        Statement s = con.createStatement();
		        s.executeUpdate(query);
		
				
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
		        lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}	
			
			String query2 = " SELECT OrderID\r\n" + 
					" FROM orders\r\n" + 
					" WHERE CustomerID = " + customerID +" AND OrderDate = '" + sqlDate +"' AND Total = " + total +";";
		//System.out.println(query2);
			try (Connection con = DriverManager.getConnection(host, username, password);
	                PreparedStatement pst = con.prepareStatement(query2);
	                ResultSet rs = pst.executeQuery()) {

				while (rs.next()) {
					orderID = rs.getInt(1);
	            }
				
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
	            lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
			
			String query4 = "SELECT BookID, Quantity, Price, Rented, Total\r\n" + 
					"FROM Invoice \r\n" + 
					"WHERE UserID = "+ userID+";";
			int bookID, rented, quantity;
			double price, total2;
			
			String query3;
			
			try (Connection con = DriverManager.getConnection(host, username, password);
	                PreparedStatement pst = con.prepareStatement(query4);
	                ResultSet rs = pst.executeQuery()) {
				

				while (rs.next()) {
					bookID = rs.getInt(1);
					quantity = rs.getInt(2);
					price = rs.getDouble(3);
					rented = rs.getInt(4);
					total2 = rs.getDouble(5);
					
					query3 = "INSERT INTO `order item` (OrderID, BookID, OrderDate, Quantity, Price, Rented, Total) VALUES (\r\n" + 
							"   " + orderID + ",\r\n" + 
							bookID + ",\r\n" + 
							"   '" + sqlDate +"',\r\n" + 
							quantity + ",\r\n" + 
							price + ",\r\n" + 
							rented + ",\r\n" 
							 + total2+ "\r\n" + 
							" );";
					//System.out.println(query3);
					
					 Statement s = con.createStatement();
				        s.executeUpdate(query3);	
					
					
	            }
				
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
	            lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
			
			
			
			
			try  (Connection con = DriverManager.getConnection(host, username, password)) {
				
		       	   		        
				
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
		        lgr.log(Level.SEVERE, ex.getMessage(), ex);
				}
			
			
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println("Transaction confirmed.\n Thank you for shopping at the UNF Bookstore! Swoop!");
}
	
	else {
		System.out.println("Maximum number of rentals [2] currently checked out.\n Return a rental to rent a new item.");
	}
	}//end CreateOrder
	

//CHANGED
public static void CreateRental() {
	
	if (rented == 1 && flag == 1) {
	
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    Date date = new Date();
    String date1 = df.format(date);
    Date utilDate;
    
    String query5 = "SELECT Quantity \r\n" + 
			"FROM Invoice\r\n" + 
			"WHERE UserID = '" + userID +"' AND Rented =" +1+ "\r\n;";
	
			try (Connection con = DriverManager.getConnection(host, username, password);
	                PreparedStatement pst = con.prepareStatement(query5);
	                ResultSet rs = pst.executeQuery()) {
		
				while (rs.next()) {
					 quantity = rs.getInt(1);
					
	            }
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
	            lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
		
		if(rentCount > 3 || rentCount + quantity > 3){
			System.out.println("Max number of rentals (2) checked out.\n Return one to rent another.\n");
			Cart();
			
		}
		
		else
			
		{
			
			
			int release;
			String title;
			
			String query7 = "SELECT DATE_ADD(`order item`.OrderDate, INTERVAL 5 DAY), books.NewRelease, books.Title\r\n" + 
					"FROM `order item` \r\n" + 
					"INNER JOIN orders on orders.OrderID = `order item`.OrderID\r\n" + 
					"INNER JOIN books on books.BookID = `order item`.BookID\r\n" + 
					"WHERE CustomerID = "+customerID+" AND Rented = 1;";
			Calendar c = Calendar.getInstance();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			try (Connection con = DriverManager.getConnection(host, username, password);
	                PreparedStatement pst = con.prepareStatement(query7);
	                ResultSet rs = pst.executeQuery()) {
		
				while (rs.next()) {
					 dueDate = rs.getDate(1);
					 release = rs.getInt(2);
					 title = rs.getString(3);
					 if (release == 1) {
						 c.setTime(dueDate);
						 c.add(Calendar.DAY_OF_MONTH, -1);
						 date5 = sdf.format(c.getTime());
						 
					 }
					 else {
						 c.setTime(dueDate);
						 date5 = sdf.format(c.getTime());
					 }
					 
					
	            }
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
	            lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
			
			
		
			
			
			

	        String query2 = "SELECT BookID, Price \r\n" + 
	        		"FROM Invoice\r\n" + 
	        		"WHERE UserID = "+userID+" AND Rented = 1;";
	        
	        
   
        
        
        try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query2);
                ResultSet rs = pst.executeQuery()) {
	
			while (rs.next()) {
				 bID = rs.getInt(1);
				 sum = rs.getDouble(2);
				 try {
				        utilDate = new SimpleDateFormat("yyyy-MM-dd").parse(date1);
				        java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
				        
				 String query = "INSERT INTO rentals (UserID, BookID, CheckoutDate, DueDate, RentalPrice) VALUES (\r\n" + 
			                "   " + userID + ",\r\n" + 
			                bID +" ,\r\n" + 
			                "    '"+ sqlDate +"',\r\n" + 
			                "    '"+ date5 +"',\r\n" + 
			                    +sum+");";
			//System.out.println(query);
				 Statement s = con.createStatement();
			        s.executeUpdate(query);	
				 
			} catch (ParseException e) {
		        // TODO Auto-generated catch block
		        e.printStackTrace();
		    }
			        
			        
			        
            }
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
        
        

    
		}

	}
}// end createRental

	
public static void Return () {
	Scanner scan = new Scanner(System.in);
	String ISBN;
	Date checkoutDate;
	Date dueDate;
	Date orderDate;
	double price;
	int userQuantity;
	System.out.println("Enter 1 to return a rental\n" + "Enter 2 to return a purchase\n" + "Enter 3 to return to menu\n");
	choice = Integer.parseInt(scan.nextLine());
	
	if(choice == 1) {
		String query7 = "SELECT NumRentals \r\n" + 
				"FROM users\r\n" + 
				"WHERE UserID ="+userID+";\r\n";
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query7);
                ResultSet rs = pst.executeQuery()) {
	
			while (rs.next()) {
				choice = rs.getInt(1);
            }
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		
		
		
		String query = "SELECT books.Title, books.ISBN,rentals.CheckoutDate, rentals.DueDate\r\n" + 
				"FROM rentals\r\n" + 
				"INNER JOIN books on books.BookID = rentals.BookID\r\n" + 
				"WHERE rentals.UserID = " + userID +";";
		//System.out.println(query);
		System.out.println("CURRENT RENTALS");
		System.out.println("---------------");
		if (choice <= 0) {
			System.out.println("You currently have no rentals.\n");
			Return();
		}
		
		else {
		
		System.out.printf("%-85s %-15s %-10s     %-15s\n", "Title", "ISBN"  ,"Checkout Date",  "Due Date");
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query);
                ResultSet rs = pst.executeQuery()) {
	
			while (rs.next()) {
				title = rs.getString(1);
				ISBN = rs.getString(2);
				checkoutDate = rs.getDate(3);
				dueDate = rs.getDate(4);
				
				System.out.printf("%-85s %-15s %-10s \t%-15s\n", title, ISBN , checkoutDate, dueDate);
            }
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		
		System.out.println("\nEnter the ISBN of the book you wish to return");
		userString = scan.nextLine();
		
		
		
		
		
		
		
								
		String query2 = "DELETE rentals\r\n" + 
				"FROM rentals\r\n" + 
				"INNER JOIN books ON books.BookID = rentals.BookID\r\n" + 
				"WHERE ISBN = '" + userString +"';";
		
		String query3 = "UPDATE users\r\n" + 
				"SET NumRentals = NumRentals - 1 " +
				"WHERE UserID = " + userID + ";";
		//System.out.println(query3);
		
		
		try  (Connection con = DriverManager.getConnection(host, username, password)) {

            Statement s = con.createStatement();
            s.executeUpdate(query2);
            s.executeUpdate(query3);

        }catch(SQLException ex) {
            Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
            }
		System.out.println("Book returned");
		Return();
		}		
	}
	
	 if(choice == 2) {
		
		String query5 = "SELECT books.Title, books.ISBN, `order item`.Price,`order item`.Quantity ,`order item`.OrderDate\r\n" + 
				"FROM `order item`\r\n" + 
				"INNER JOIN books ON books.BookID = `order item`.BookID\r\n" + 
				"INNER JOIN orders ON orders.OrderID = `order item`.OrderID\r\n" + 
				"INNER JOIN customers ON customers.CustomerID = orders.CustomerID\r\n" + 
				"WHERE customers.UserID = " + userID + " AND Rented = 0;";
		
		System.out.println("PREVIOUSLY BOUGHT");
		System.out.println("-----------------");
		System.out.printf("%-85s %-15s %-8s %-8s %-15s\n", "Title", "ISBN"  ,"Price", "Quantity" ,"Order Date");
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query5);
                ResultSet rs = pst.executeQuery()) {
	
			while (rs.next()) {
				title = rs.getString(1);
				ISBN = rs.getString(2);
				price = rs.getDouble(3);
				quantity1 = rs.getInt(4);
				orderDate = rs.getDate(5);
				
				System.out.printf("%-85s %-15s %-8s %-8s\t%-15s\n", title, ISBN , price, quantity1 ,orderDate);
            }
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		System.out.println("\nEnter the ISBN of the book you wish to return");
		userString = scan.nextLine();
		//update inventory after
		
		
		String query11 = "SELECT FormatID \r\n" + 
				"FROM books\r\n" + 
				"WHERE ISBN = '" + userString + "';";
		
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query11);
                ResultSet rs = pst.executeQuery()) {
	
			while (rs.next()) {
			formatID = rs.getInt(1);	

            }
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		if (formatID == 5 || formatID == 8) {
			
			System.out.println("Digital books are inelgible for returns.");
		}
		
		else {
		
		String query6 = "SELECT Quantity\r\n" + 
				"FROM `order item`\r\n" + 
				"INNER JOIN books ON books.BookID = `order item`.BookID\r\n" + 
				"WHERE books.ISBN = '" + userString + "';";
		//System.out.println(query6);
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query6);
                ResultSet rs = pst.executeQuery()) {
	
			while (rs.next()) {
				
				quantity1 = rs.getInt(1);
				
            }
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
	
		System.out.println("\nEnter quantity you wish to return");
		userQuantity = scan.nextInt();
		
		if(userQuantity > quantity1) {
			System.out.println("number exceeds quantity");
			Return();
		}
		else if(userQuantity == quantity1){
			String query7 = "UPDATE books\r\n" + 
					"SET Inventory = Inventory + " + userQuantity + "\r\n" + 
					"WHERE ISBN = '" + userString +"';";
			//System.out.println(query7);
			String query8 = "DELETE `order item`\r\n" + 
					"FROM `order item`\r\n" + 
					"INNER JOIN books ON books.BookID = `order item`.BookID\r\n" + 
					"WHERE ISBN = '" + userString +"' AND Quantity = " + userQuantity +";";
			//System.out.println(query8);
			try  (Connection con = DriverManager.getConnection(host, username, password)) {

	            Statement s = con.createStatement();
	            s.executeUpdate(query7);
	            s.executeUpdate(query8);

	        }catch(SQLException ex) {
	            Logger lgr = Logger.getLogger(clientProgram.class.getName());
	            lgr.log(Level.SEVERE, ex.getMessage(), ex);
	            }	
			
			System.out.println("Item(s) returned.\n");
		}
		else if(userQuantity < quantity1) {
			String query9 = "UPDATE books\r\n" + 
					"SET Inventory = Inventory + " + userQuantity + "\r\n" + 
					"WHERE ISBN = '" + userString +"';";
			
			String query10 = "UPDATE `order item`\r\n" + 
					"INNER JOIN books ON books.BookID = `order item`.BookID\r\n" + 
					"SET Quantity = Quantity - '"+ userQuantity +"'\r\n" + 
					"WHERE ISBN = '" + userString +"' AND Quantity = "+ quantity1 +" ;";
			
			//System.out.println(query10);
			try  (Connection con = DriverManager.getConnection(host, username, password)) {

	            Statement s = con.createStatement();
	            s.executeUpdate(query9);
	            s.executeUpdate(query10);

	        }catch(SQLException ex) {
	            Logger lgr = Logger.getLogger(clientProgram.class.getName());
	            lgr.log(Level.SEVERE, ex.getMessage(), ex);
	            }	
			System.out.println("Item(s) returned");
			Return();
		}
		}
			
	}
	
	 if(choice == 3) {
			UserAccess();
		}

	 else {
		 Return();
		}
	 
}	//end RETURN


	public static void Balance () {
		Scanner scan = new Scanner(System.in);
		int userChoice;
		String query = "SELECT LateFee\r\n" + 
				"FROM users\r\n" + 
				"WHERE UserID = " + userID + ";";
		System.out.println("BALANCE");
		System.out.println("-------");
		try (Connection con = DriverManager.getConnection(host, username, password);
                PreparedStatement pst = con.prepareStatement(query);
                ResultSet rs = pst.executeQuery()) {
	
			while (rs.next()) {
				
			LateFee = rs.getDouble(1);
				
            }
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		System.out.println(LateFee);
		
		System.out.println("Enter 1 to pay late fee\n" + "Enter 2 to return to menu\n");
		
		userChoice = scan.nextInt();
		
		if(userChoice == 1) {
			String query2 = "UPDATE users\r\n" + 
					"SET LateFee = 0\r\n" + 
					"WHERE UserID = " + userID + ";";
			
			try  (Connection con = DriverManager.getConnection(host, username, password)) {

	            Statement s = con.createStatement();
	            s.executeUpdate(query2);
	           

	        }catch(SQLException ex) {
	            Logger lgr = Logger.getLogger(clientProgram.class.getName());
	            lgr.log(Level.SEVERE, ex.getMessage(), ex);
	            }	
			
			Balance();
			
			
		}
		else if(userChoice == 2) {
			UserAccess();
		}
		
	}//end balance
	
	public static void CreateCustomer() {
		Scanner scan2 = new Scanner(System.in);
		String firstName, lastName, email, phone, address, zip, city, state, country;
		
		if(signedIn == true) {
			
			
			System.out.println("Enter phone number:\n");
			phone = scan2.nextLine();
			System.out.println("Enter street address:\n");
			address = scan2.nextLine();
			System.out.println("Enter zip code:\n");
			zip = scan2.nextLine();
			System.out.println("Enter city:\n");
			city = scan2.nextLine();
			System.out.println("Enter state:\n");
			state = scan2.nextLine();
			System.out.println("Enter country:\n");
			country = scan2.nextLine();
			
			String query = "INSERT INTO `customers` (UserID, Email, FirstName, LastName, Phone, StreetAddress, ZipCode, City, State, Country) VALUES (\r\n" + 
			 		"   (SELECT UserId FROM users WHERE Email IN ('" + userEmail + "')),\r\n" + 
			 		"     '" + userEmail + "',\r\n" + 
			 		"	(SELECT FirstName FROM users WHERE Email IN ('" + userEmail + "')),\r\n" + 
			 		"	(SELECT LastName FROM users WHERE Email IN ('" + userEmail + "')),\r\n" + 
			 		"    '" + phone +"',\r\n" + 
			 		"    '" + address +"',\r\n" + 
			 		"    '" + zip +"',\r\n" + 
			 		"    '" + city +"',\r\n" + 
			 		"    '" + state +"',\r\n" + 
			 		"    '" + country +"' 	     \r\n" + 
			 		" );";	
		
			 try  (Connection con = DriverManager.getConnection(host, username, password)) {
					
			        Statement s = con.createStatement();
			        s.executeUpdate(query);
					
				}catch(SQLException ex) {
					Logger lgr = Logger.getLogger(clientProgram.class.getName());
			        lgr.log(Level.SEVERE, ex.getMessage(), ex);
					}
			
			 custEmail = userEmail;
			 
			 String query2 ="SELECT CustomerID\r\n" + 
			 		"FROM customers\r\n" + 
			 		"WHERE Email = '"+custEmail+"';";
			 
			 try (Connection con = DriverManager.getConnection(host, username, password);
             PreparedStatement pst = con.prepareStatement(query2);
             ResultSet rs = pst.executeQuery()) {
	
			while (rs.next()) {
				customerID = rs.getInt(1);
         }
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
         lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
			 
			 
			 
			 
			 
		}
		else {
			
			System.out.println("Enter first name:\n");
			firstName = scan2.nextLine();
			System.out.println("Enter last name:\n");
			lastName = scan2.nextLine();
			System.out.println("Enter email:\n");
			custEmail = scan2.nextLine();
			System.out.println("Enter phone number:\n");
			phone = scan2.nextLine();
			System.out.println("Enter street address:\n");
			address = scan2.nextLine();
			System.out.println("Enter zip code:\n");
			zip = scan2.nextLine();
			System.out.println("Enter city:\n");
			city = scan2.nextLine();
			System.out.println("Enter state:\n");
			state = scan2.nextLine();
			System.out.println("Enter country:\n");
			country = scan2.nextLine();
			
			String query = "INSERT INTO `customers` (UserID, Email, FirstName, LastName, Phone, StreetAddress, ZipCode, City, State, Country) VALUES (\r\n" + 
			 		"   (SELECT UserId FROM users WHERE Email IN ('" + guest + "')),\r\n" + 
			 		"     '" + custEmail + "',\r\n" + 
			 		"	'" + firstName +"',\r\n" + 
			 		"	'" + lastName +"',\r\n" + 
			 		"    '" + phone +"',\r\n" + 
			 		"    '" + address +"',\r\n" + 
			 		"    '" + zip +"',\r\n" + 
			 		"    '" + city +"',\r\n" + 
			 		"    '" + state +"',\r\n" + 
			 		"    '" + country +"' 	     \r\n" + 
			 		" );";
	
			 try  (Connection con = DriverManager.getConnection(host, username, password)) {
					
			        Statement s = con.createStatement();
			        s.executeUpdate(query);		   
			        
				}catch(SQLException ex) {
					Logger lgr = Logger.getLogger(clientProgram.class.getName());
			        lgr.log(Level.SEVERE, ex.getMessage(), ex);
					}
			 
			 
			 String query2 ="SELECT CustomerID\r\n" + 
				 		"FROM customers\r\n" + 
				 		"WHERE Email = '"+custEmail+"';";
				 
				 try (Connection con = DriverManager.getConnection(host, username, password);
	             PreparedStatement pst = con.prepareStatement(query2);
	             ResultSet rs = pst.executeQuery()) {
		
				while (rs.next()) {
					customerID = rs.getInt(1);
	         }
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
	         lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
			
		}
	}//end CreatCustomer()
	
	public static void LogIn() {
		Scanner scan1 = new Scanner(System.in);
		String var1, var2, var3;
		System.out.println("Email: ");
		userEmail = scan1.nextLine();
		//if userEmail != an email in database then prompt user to enter again
		//else
		String query1 = "SELECT Email, Password, FirstName, UserID " + 
				"FROM users "
				+ "WHERE Email = '" + userEmail + "';";
	
			try  (Connection con = DriverManager.getConnection(host, username, password);
	
						PreparedStatement pst = con.prepareStatement(query1);
						ResultSet rs = pst.executeQuery()) {
	
					while (rs.next()) {
						var1 = rs.getString(1);
						var2 = rs.getString(2);
						var3 = rs.getString(3);
						userID = rs.getString(4);
						
							if (var1.compareToIgnoreCase(userEmail) == 0) {
								System.out.println("Password: ");
								userPass = scan1.nextLine();
								
								if (var1.compareToIgnoreCase(userEmail) == 0 && var2.compareToIgnoreCase(userPass) == 0) {
									System.out.println("Login Successful!\n");
									System.out.println("Welcome: " + var3);
									signedIn = true;
									UserAccess();
								}// end first if
								else {
									System.out.println("Password was incorrect!");
									System.out.println("Enter 1 to try again\n" + "Enter 2 to create account\n");
									choice = scan1.nextInt();
									
									if(choice == 1) {
										LogIn();
									}
									else if(choice == 2) {
										CreateAccount();
									}
									else {
										while(choice != 1 || choice != 2) {
											System.out.println("Invalid Option!");
											choice = scan1.nextInt();
										}
									}
								}
							}// end first if
						
					}//end while
					if(signedIn == false) {
					System.out.println("Email was incorrect!");
					
					
					System.out.println("Enter 1 to try again\n" + "Enter 2 to create account\n");
					choice = scan1.nextInt();
					
					if(choice == 1) {
						LogIn();
					}
					else if(choice == 2) {
						CreateAccount();
					}
					else {
						while(choice != 1 || choice != 2) {
							System.out.println("Invalid Option!");
							choice = scan1.nextInt();
						}
					}
					
				}
			//scan.close();
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
				lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
		while(true) {
		UserAccess();
		}
		//System.out.println("Password: ");
		//userPass = scanner.nextLine();
		//if userPassword != an email in database then prompt user to enter again
		
	}
	
	public static void LogOut() {
		userEmail = null;
		userPass = null;
		userID = null;
		System.out.println("sign out succesful");
		signedIn = false;
		MainMenu();
	}
	
	public static void CreateAccount () {
		Scanner scan = new Scanner(System.in);
		String firstName;
		String lastName;
		String confirmEmail;
		String confirmPass;
		
		//code to create account
		System.out.println("Enter First Name");
			firstName = scan.nextLine();
		System.out.println("Enter Last Name");
			lastName = scan.nextLine();
		System.out.println("Enter Email");
			userEmail = scan.nextLine();
			CheckEmail();
		System.out.println("Confirm Email");
			confirmEmail = scan.nextLine();
		while (confirmEmail.compareToIgnoreCase(userEmail) != 0)
		{
			System.out.println("One of your values did not match.");
			System.out.println("Enter Email");
			userEmail = scan.nextLine();
			
			System.out.println("Confirm Email");
			confirmEmail = scan.nextLine();
		}
		System.out.println("Enter Password");
			userPass = scan.nextLine();
		System.out.println("Confirm Password");	
			confirmPass = scan.nextLine();
			
		while (confirmPass.compareToIgnoreCase(userPass) != 0) {
			
			System.out.println("One of your values did not match.");
			System.out.println("Enter Password");
				userPass = scan.nextLine();
			System.out.println("Confirm Password");	
				confirmPass = scan.nextLine();
		}
		
	String query = "INSERT INTO `group1`.`users` (`FirstName`, `LastName`, `Email`, `Password`) VALUES ('"+ firstName +"', '"+ lastName +"', '" + userEmail + "', '" + userPass +"');";
		
		try  (Connection con = DriverManager.getConnection(host, username, password)) {
		
            Statement s = con.createStatement();
            s.executeUpdate(query);
            System.out.println("Account Created!");
			
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		//scan.close();
		UserAccess();
		
	}// end Create Account
	
	public static void createGuestAccount() {
	
		String query = "INSERT INTO `group1`.`users` (`FirstName`, `LastName`, `Email`, `Password`) VALUES ('guest', 'guest', '" + userEmail + "', 'guest' );";
		try  (Connection con = DriverManager.getConnection(host, username, password)) {
			
            Statement s = con.createStatement();
            s.executeUpdate(query);
            System.out.println("Guest Account Created!");
			
		}catch(SQLException ex) {
			Logger lgr = Logger.getLogger(clientProgram.class.getName());
            lgr.log(Level.SEVERE, ex.getMessage(), ex);
		}
		
		String query1 = "SELECT Email, UserID " + 
				"FROM users "
				+ "WHERE Email = '" + userEmail + "';";
		
			try  (Connection con1 = DriverManager.getConnection(host, username, password);
	
						PreparedStatement pst = con1.prepareStatement(query1);
						ResultSet rs = pst.executeQuery()) {
	
					while (rs.next()) {
						userEmail = rs.getString(1);
						userID = rs.getString(2);

					}
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
				lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
			
}

	
	public static void CheckEmail() {
		Scanner scan1 = new Scanner(System.in);
		//int var = Integer.parseInt(scan1.nextLine());
		String var1;
		String query1 = "SELECT Email " + 
				"FROM users;";
			try  (Connection con = DriverManager.getConnection(host, username, password);
	
						PreparedStatement pst = con.prepareStatement(query1);
						ResultSet rs = pst.executeQuery()) {
	
					while (rs.next()) {
						var1 = rs.getString(1);
							if (var1.compareToIgnoreCase(userEmail) == 0) {
									System.out.println("The email you entered is already in use. Please enter another.\n"
													+ "Enter 1 to continue or Enter 2 to Log In");
														choice = Integer.parseInt(scan1.nextLine());
				
														if (choice == 1) {
															System.out.print("Enter another email: ");
															userEmail = scan1.nextLine();
															CheckEmail();
					
														} // end second if
														
														else if (choice == 2) {
															LogIn();
														}
							}// end first if
		
					}//end while
			//scan.close();
			}catch(SQLException ex) {
				Logger lgr = Logger.getLogger(clientProgram.class.getName());
				lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
		
	}// end Check email
	
	
}//end clientProgram
